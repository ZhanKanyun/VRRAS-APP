
window.gaitConfig = {
    /**
    * 矢状面正常关节运动范围标准
    **/
    // 平均值
    AVG_thigh: [
        31.2, 31.3, 31.2, 31.2, 31.0, 30.9, 30.7, 30.3, 29.7, 28.9, 28.0, 27.0, 26.0, 25.0, 23.9, 22.7, 21.6, 20.5, 19.2, 18.0,
        16.7, 15.5, 14.3, 13.1, 11.9, 10.7, 9.5, 8.3, 7.1, 6.0, 4.9, 3.8, 2.7, 1.7, 0.7, -0.4, -1.4, -2.3, -3.2, -4.0,
        -4.9, -5.6, -6.4, -7.0, -7.6, -8.1, -8.6, -8.9, -9.2, -9.5, -9.6, -9.6, -9.5, -9.1, -8.7, -7.9, -7.0, -5.9, -4.7, -3.2,
        -1.6, 0.1, 2.0, 4.0, 6.0, 8.1, 10.2, 12.2, 14.2, 16.2, 18.0, 19.9, 21.7, 23.4, 25.0, 26.5, 27.8, 29.1, 30.2, 31.2,
        32.0, 32.7, 33.2, 33.5, 33.7, 33.7, 33.6, 33.3, 33.0, 32.5, 32.0, 31.5, 31.1, 30.8, 30.5, 30.3, 30.3, 30.3, 30.3, 30.4,
    ],
    AVG_shin: [
        4.7, 6.4, 8.0, 9.6, 11.2, 12.8, 14.6, 16.0, 16.9, 17.5, 17.8, 17.9, 17.8, 17.6, 17.3, 16.8, 16.1, 15.5, 14.7, 13.9,
        13.0, 12.2, 11.4, 10.6, 9.8, 9.1, 8.3, 7.6, 6.9, 6.3, 5.6, 5.1, 4.6, 4.1, 3.8, 3.5, 3.3, 3.2, 3.2, 3.3,
        3.5, 3.8, 4.2, 4.8, 5.5, 6.3, 7.3, 8.4, 9.5, 10.8, 12.2, 13.8, 15.6, 17.6, 19.7, 22.2, 24.9, 27.9, 31.1, 34.3,
        37.6, 40.9, 44.3, 47.4, 50.2, 52.6, 54.6, 56.2, 57.4, 58.3, 58.6, 58.7, 58.4, 57.9, 57.0, 56.0, 54.5, 52.8, 50.7, 48.3,
        45.6, 42.5, 39.3, 35.7, 31.9, 27.9, 23.8, 19.7, 15.7, 11.9, 8.3, 5.1, 2.6, 0.7, -0.4, -0.9, -0.7, 0.2, 1.5, 3.0,
    ],
    AVG_ankle: [
        -2.0, -3.0, -4.1, -5.1, -5.7, -5.7, -5.2, -4.3, -3.4, -2.6, -1.8, -0.9, -0.1, 0.7, 1.4, 2.0, 2.6, 3.1, 3.5, 3.9,
        4.4, 4.8, 5.1, 5.4, 5.8, 6.1, 6.4, 6.7, 7.0, 7.3, 7.5, 7.7, 8.0, 8.2, 8.5, 8.9, 9.2, 9.4, 9.7, 9.9,
        10.2, 10.4, 10.6, 10.7, 10.7, 10.7, 10.6, 10.3, 9.9, 9.2, 8.2, 7.1, 5.6, 3.6, 1.3, -1.5, -4.3, -7.3, -10.2, -12.9,
        -15.0, -16.6, -17.4, -17.5, -17.0, -16.0, -14.8, -13.4, -12.0, -10.5, -9.0, -7.5, -6.1, -4.8, -3.6, -2.4, -1.4, -0.5, 0.3, 1.0,
        1.5, 1.9, 2.1, 2.3, 2.2, 2.1, 1.9, 1.7, 1.5, 1.2, 0.8, 0.5, 0.2, 0.0, -0.1, -0.3, -0.5, -0.8, -1.0, -1.5,
    ],
    // 标准差
    STDD_thigh: [
        6.2, 6.1, 6.1, 6.1, 6.1, 6.1, 6.2, 6.1, 6.1, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 5.9, 5.9, 5.8, 5.8,
        5.8, 5.8, 5.7, 5.8, 5.7, 5.7, 5.8, 5.8, 5.8, 5.8, 5.8, 5.8, 5.9, 5.9, 5.9, 5.9, 6.0, 6.1, 6.1, 6.2,
        6.3, 6.4, 6.5, 6.6, 6.6, 6.7, 6.8, 6.8, 6.9, 6.9, 6.9, 6.9, 7.0, 7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.5,
        7.6, 7.7, 7.8, 7.8, 7.7, 7.7, 7.6, 7.5, 7.4, 7.3, 7.2, 7.1, 7.1, 7.0, 6.9, 6.8, 6.8, 6.7, 6.7, 6.6,
        6.5, 6.5, 6.5, 6.5, 6.4, 6.4, 6.4, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.4, 6.4, 6.4, 6.4, 6.3, 6.3, 6.3,
    ],
    STDD_shin: [
        4.8, 4.7, 4.6, 4.5, 4.6, 4.8, 5.1, 5.2, 5.2, 5.1, 5.0, 5.0, 5.1, 5.2, 5.3, 5.4, 5.5, 5.5, 5.4, 5.4,
        5.4, 5.4, 5.3, 5.2, 5.2, 5.2, 5.2, 5.1, 5.1, 5.2, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6.0, 6.0,
        6.1, 6.1, 6.2, 6.1, 6.1, 6.1, 6.1, 6.1, 6.1, 6.1, 6.0, 6.1, 6.1, 6.3, 6.4, 6.6, 6.7, 6.9, 7.1, 7.2,
        7.2, 7.2, 7.0, 6.7, 6.3, 6.0, 5.6, 5.3, 5.1, 5.0, 4.9, 4.9, 4.8, 4.8, 4.9, 5.1, 5.2, 5.4, 5.7, 6.0,
        6.3, 6.7, 7.1, 7.6, 8.0, 8.3, 8.6, 8.8, 8.8, 8.6, 8.2, 7.6, 7.0, 6.4, 6.0, 5.5, 5.3, 5.1, 4.9, 4.9,
    ],
    STDD_ankle: [
        3.0, 3.0, 3.0, 2.9, 3.0, 3.1, 3.2, 3.1, 3.0, 3.0, 3.0, 3.0, 2.9, 2.8, 2.8, 2.9, 2.9, 3.0, 3.0, 3.0,
        3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.1, 3.1, 3.2, 3.3, 3.3, 3.4, 3.5, 3.5, 3.6,
        3.6, 3.7, 3.7, 3.8, 3.8, 3.8, 3.8, 3.8, 3.8, 3.8, 3.9, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.3, 5.4, 5.4,
        5.4, 5.4, 5.5, 5.6, 5.7, 5.6, 5.5, 5.3, 5.1, 4.9, 4.7, 4.6, 4.5, 4.5, 4.5, 4.4, 4.3, 4.2, 4.1, 4.0,
        3.9, 3.8, 3.7, 3.6, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.4, 3.3, 3.2, 3.1,
    ],
}

/**
 * IIR滤波参数
 */
window.IIR = {

    getArgsByFPass: function (fpass, iir) {
        var mm = iir.Args.find(function (item) { return item.FPass == fpass });
        if (mm) {
            return mm;
        }
        return null;

    },

    IIR_20: {  // 1.5Hz  1.8Hz  2Hz  3.5Hz  3Hz  3.5Hz
        Fs: '20Hz',
        Args: [
            {
                FPass: '1.5Hz',
                An: [
                    1,
                    -5.2342674806678984,
                    11.735158822702855,
                    -14.394570967332079,
                    10.176119685410711,
                    -3.9286148963218901,
                    0.64698960883293544
                ],
                Bn: [
                    0.0003920550386171089,
                    -0.00060227327017197145,
                    0.00096737971456902654,
                    -0.00078815609995638327,
                    0.00096737971456902654,
                    -0.00060227327017197145,
                    0.0003920550386171089
                ]
            },
            {
                FPass: '1.8Hz',
                An: [
                    1,
                    -5.0077391663333266,
                    10.890272660751084,
                    -13.108818071019632,
                    9.1917544864637044,
                    -3.556234525056607,
                    0.593118766162817
                ],
                Bn: [
                    0.00057457010574279153,
                    -0.00039711857290904514,
                    0.0010336631509717141,
                    -0.00032409010883373458,
                    0.0010336631509717141,
                    -0.00039711857290904514,
                    0.00057457010574279153
                ]
            },
            {
                FPass: '2Hz',
                An: [
                    1,
                    -4.8444113615765829,
                    10.306880296619171,
                    -12.248035497183068,
                    8.5481135283827019,
                    -3.3179532126424611,
                    0.55974467102065029
                ],
                Bn: [
                    0.00073881222429901094,
                    -0.00012867549283607227,
                    0.0012484724932459034,
                    0.00014940656354661642,
                    0.0012484724932459034,
                    -0.00012867549283607227,
                    0.00073881222429901094
                ]
            },
            {
                FPass: '2.5Hz',
                An: [
                    1,
                    -4.3953718980122209,
                    8.8065907250470143,
                    -10.125704979452649,
                    7.0049484999755807,
                    -2.7590717209153501,
                    0.48438075191575458
                ],
                Bn: [
                    0.0013606982922613605,
                    0.0013265712897603953,
                    0.0030177674061202617,
                    0.0026461819593100854,
                    0.0030177674061202617,
                    0.0013265712897603953,
                    0.0013606982922613605
                ]
            },
            {
                FPass: '3Hz',
                An: [
                    1,
                    -3.8922693853404366,
                    7.2963884328145294,
                    -8.1102660649970879,
                    5.586567010933237,
                    -2.2545730952299792,
                    0.41928584786026396
                ],
                Bn: [
                    0.0024337489035941616,
                    0.0047234051021795027,
                    0.0083363854047110199,
                    0.0092375234282029844,
                    0.0083363854047110199,
                    0.0047234051021795027,
                    0.0024337489035941616
                ]
            },
            {
                FPass: '3.5Hz',
                An: [
                    1,
                    -3.3402762918833879,
                    5.8386845291286757,
                    -6.2687764108256729,
                    4.3219241797639869,
                    -1.8049193129288441,
                    0.36306488784684354
                ],
                Bn: [
                    0.0042236879725910696,
                    0.011598067635229532,
                    0.020792662435673941,
                    0.024542800984567514,
                    0.020792662435673941,
                    0.011598067635229532,
                    0.0042236879725910696
                ]
            }
        ]
    },

    IIR_40: {  // 1.1 ~ 3.7 Hz
        Fs: '40Hz',
        Args: [
            {
                FPass: '1.1Hz',
                An: [
                    1,
                    -5.7942363978197768,
                    14.036206470178728,
                    -18.194624646583947,
                    13.309990286306087,
                    -5.2096926123799667,
                    0.85235912631995792
                ],
                Bn: [
                    0.00012728774048076082,
                    -0.00061121587465648984,
                    0.0013331359840229114,
                    -0.0016964317563149612,
                    0.0013331359840229114,
                    -0.00061121587465648984,
                    0.00012728774048076082
                ]
            },
            {
                FPass: '1.2Hz',
                An: [
                    1,
                    -5.7710661295948649,
                    13.933339432462045,
                    -18.012368384425375,
                    13.149141749506985,
                    -5.139115648992739,
                    0.84007270816008994
                ],
                Bn: [
                    0.00013338299251610235,
                    -0.00061650656787958337,
                    0.0013135750579191361,
                    -0.0016575811693546108,
                    0.0013135750579191361,
                    -0.00061650656787958337,
                    0.00013338299251610235
                ]
            },
            {
                FPass: '1.3Hz',
                An: [
                    1,
                    -5.7471700693417294,
                    13.828142383374733,
                    -17.827543401488139,
                    12.987432383672491,
                    -5.0688193467057747,
                    0.82796403572211408
                ],
                Bn: [
                    0.00014014260052532226,
                    -0.0006221126698331659,
                    0.0012933677764342811,
                    -0.0016174610691085413,
                    0.0012933677764342811,
                    -0.0006221126698331659,
                    0.00014014260052532226
                ]
            },
            {
                FPass: '1.4Hz',
                An: [
                    1,
                    -5.7225525884043034,
                    13.720666574081228,
                    -17.64025529336627,
                    12.824937832122854,
                    -4.9988178288695115,
                    0.81603058016485974
                ],
                Bn: [
                    0.00014759087515626117,
                    -0.00062791286212530149,
                    0.001272557392944505,
                    -0.0015762038099058162,
                    0.001272557392944505,
                    -0.00062791286212530149,
                    0.00014759087515626117
                ]
            },
            {
                FPass: '1.5Hz',
                An: [
                    1,
                    -5.6972180977899045,
                    13.610963884026281,
                    -17.450609761368987,
                    12.661732796614892,
                    -4.9291247270279497,
                    0.80426984704639204
                ],
                Bn: [
                    0.00015575501510724316,
                    -0.00063377600833603386,
                    0.0012511993068021366,
                    -0.0015339312515470667,
                    0.0012511993068021366,
                    -0.00063377600833603386,
                    0.00015575501510724316
                ]
            },
            {
                FPass: '1.6Hz',
                An: [
                    1,
                    -5.6711710470398433,
                    13.499086799699182,
                    -17.258712553059905,
                    12.497891018120239,
                    -4.8597531909167246,
                    0.79267937588274429
                ],
                Bn: [
                    0.00016466514015367367,
                    -0.00063956058673687801,
                    0.0012293631878163601,
                    -0.0014907515697018378,
                    0.0012293631878163601,
                    -0.00063956058673687801,
                    0.00016466514015367367
                ]
            },
            {
                FPass: '1.7Hz',
                An: [
                    1,
                    -5.6444159231057522,
                    13.38508839366227,
                    -17.064669403778421,
                    12.333485258688148,
                    -4.7907158983105251,
                    0.78125673971253662
                ],
                Bn: [
                    0.00017435433261943332,
                    -0.0006451140765565092,
                    0.0012071352076451661,
                    -0.0014467559287206339,
                    0.0012071352076451658,
                    -0.0006451140765565092,
                    0.00017435433261943332
                ]
            },
            {
                FPass: '1.8Hz',
                An: [
                    1,
                    -5.6169572492321613,
                    13.269022303847999,
                    -16.868585979133691,
                    12.168587284363257,
                    -4.7220250647216542,
                    0.76999954466740661
                ],
                Bn: [
                    0.00018485868703350649,
                    -0.00065027229933118486,
                    0.0011846203743181506,
                    -0.0014020150218612463,
                    0.0011846203743181506,
                    -0.00065027229933118486,
                    0.00018485868703350649
                ]
            },
            {
                FPass: '1.9Hz',
                An: [
                    1,
                    -5.5887995838458604,
                    13.150942713128197,
                    -16.67056781846037,
                    12.003267849129616,
                    -4.6536924529514145,
                    0.75890542954816798
                ],
                Bn: [
                    0.00019621736773236222,
                    -0.00065485871675056723,
                    0.0011619449664421954,
                    -0.0013565754834796051,
                    0.0011619449664421954,
                    -0.00065485871675056723,
                    0.00019621736773236222
                ]
            },
            {
                FPass: '2Hz',
                An: [
                    1,
                    -5.5599475194525061,
                    13.030904329158862,
                    -16.470720279224189,
                    11.837596679852869,
                    -4.5857293824959502,
                    0.74797206540661343
                ],
                Bn: [
                    0.00020847267418799628,
                    -0.00065868368628623072,
                    0.0011392590639625112,
                    -0.0013104561773022393,
                    0.0011392590639625114,
                    -0.00065868368628623072,
                    0.00020847267418799628
                ]
            },
            {
                FPass: '2.1Hz',
                An: [
                    1,
                    -5.5304056815410156,
                    12.908962364503402,
                    -16.269148482364564,
                    11.671642462193551,
                    -4.5181467388082055,
                    0.73719715513289674
                ],
                Bn: [
                    0.00022167011386029496,
                    -0.00066154367577102519,
                    0.001116739172660816,
                    -0.0012636443644797907,
                    0.001116739172660816,
                    -0.00066154367577102519,
                    0.00022167011386029496
                ]
            },
            {
                FPass: '2.2Hz',
                An: [
                    1,
                    -5.5001787274961833,
                    12.785172517036905,
                    -16.065957258560346,
                    11.505472827465049,
                    -4.4509549824175387,
                    0.72657843304841108
                ],
                Bn: [
                    0.00023585848239051596,
                    -0.00066322043798232072,
                    0.0010945909398708785,
                    -0.0012160917547177491,
                    0.0010945909398708787,
                    -0.00066322043798232072,
                    0.00023585848239051596
                ]
            },
            {
                FPass: '2.3Hz',
                An: [
                    1,
                    -5.4692713455200188,
                    12.659590950633532,
                    -15.861251095404043,
                    11.339154340410662,
                    -4.3841641579085247,
                    0.71611366450409997
                ],
                Bn: [
                    0.00025108995097025357,
                    -0.00066348014617084684,
                    0.0010730519591801947,
                    -0.0011677104433912284,
                    0.0010730519591801947,
                    -0.00066348014617084684,
                    0.00025108995097025357
                ]
            },
            {
                FPass: '2.4Hz',
                An: [
                    1,
                    -5.4376882535622526,
                    12.532274276138942,
                    -15.655134085468925,
                    11.172752487875037,
                    -4.3177839027604463,
                    0.70580064548413424
                ],
                Bn: [
                    0.00026742016073728133,
                    -0.00066207249136904429,
                    0.0010523946621654669,
                    -0.001118368737174075,
                    0.0010523946621654669,
                    -0.00066207249136904429,
                    0.00026742016073728133
                ]
            },
            {
                FPass: '2.5Hz',
                An: [
                    1,
                    -5.4054341982604459,
                    12.403279532629089,
                    -15.447709875252723,
                    11.006331668345938,
                    -4.2518234560488875,
                    0.69563720221488912
                ],
                Bn: [
                    0.00028490832406618784,
                    -0.00065872974220842042,
                    0.0010329292954796012,
                    -0.0010678868703483857,
                    0.0010329292954796012,
                    -0.00065872974220842042,
                    0.00028490832406618784
                ]
            },
            {
                FPass: '2.6Hz',
                An: [
                    1,
                    -5.372513953890163,
                    12.272664168956616,
                    -15.239081614980854,
                    10.839955182343227,
                    -4.1862916670108454,
                    0.68562119077916761
                ],
                Bn: [
                    0.00030361733263777865,
                    -0.00065316576787412598,
                    0.0010150069818695023,
                    -0.0010160326136077671,
                    0.0010150069818695023,
                    -0.00065316576787412598,
                    0.00030361733263777865
                ]
            },
            {
                FPass: '2.7Hz',
                An: [
                    1,
                    -5.3389323213255846,
                    12.140486025585485,
                    -15.029351909251343,
                    10.673685223632612,
                    -4.1211970034746743,
                    0.67575049673560994
                ],
                Bn: [
                    0.00032361387218682189,
                    -0.0006450750247266187,
                    0.00099902286395764481,
                    -0.00096251677682570929,
                    0.00099902286395764481,
                    -0.0006450750247266187,
                    0.00032361387218682189
                ]
            },
            {
                FPass: '2.8Hz',
                An: [
                    1,
                    -5.3046941270110164,
                    12.006803316714384,
                    -14.818622768503154,
                    10.507582871242597,
                    -4.0565475601561758,
                    0.66602303474323943
                ],
                Bn: [
                    0.00034496854384291593,
                    -0.00063413150702470295,
                    0.00098541932986666195,
                    -0.00090698860692867253,
                    0.00098541932986666195,
                    -0.00063413150702470295,
                    0.00034496854384291593
                ]
            },
            {
                FPass: '2.9Hz',
                An: [
                    1,
                    -5.2698042219436356,
                    11.871674612688988,
                    -14.606995561288858,
                    10.341708082263818,
                    -3.9923510668220485,
                    0.65643674819110021
                ],
                Bn: [
                    0.00036775599199407791,
                    -0.00061998766209121119,
                    0.00097468932000555725,
                    -0.00084903108169113203,
                    0.00097468932000555725,
                    -0.00061998766209121119,
                    0.00036775599199407791
                ]
            },
            {
                FPass: '3Hz',
                An: [
                    1,
                    -5.2342674806678984,
                    11.735158822702855,
                    -14.394570967332079,
                    10.176119685410711,
                    -3.9286148963218901,
                    0.64698960883293544
                ],
                Bn: [
                    0.0003920550386171089,
                    -0.00060227327017197145,
                    0.00096737971456902654,
                    -0.00078815609995638327,
                    0.00096737971456902654,
                    -0.00060227327017197145,
                    0.0003920550386171089
                ]
            },
            {
                FPass: '3.1Hz',
                An: [
                    1,
                    -5.1980888002819459,
                    11.597315177786548,
                    -14.181448931349735,
                    10.010875375326382,
                    -3.8653460724899027,
                    0.63767961642688309
                ],
                Bn: [
                    0.00041794882403294145,
                    -0.00058059428915028567,
                    0.00096409480152826865,
                    -0.00072379956848166963,
                    0.00096409480152826865,
                    -0.00058059428915028567,
                    0.00041794882403294145
                ]
            },
            {
                FPass: '3.2Hz',
                An: [
                    1,
                    -5.16127309945636,
                    11.458203214084097,
                    -13.967728617618409,
                    9.846031707612088,
                    -3.8025512779172947,
                    0.62850479838013451
                ],
                Bn: [
                    0.00044552495405899976,
                    -0.00055453166419276961,
                    0.00096549982511296871,
                    -0.00065531638530862732,
                    0.0009654998251129686,
                    -0.00055453166419276961,
                    0.00044552495405899976
                ]
            },
            {
                FPass: '3.3Hz',
                An: [
                    1,
                    -5.1238253174656263,
                    11.317882756415859,
                    -13.753508365264,
                    9.681644094563854,
                    -3.7402368615964754,
                    0.61946320939854826
                ],
                Bn: [
                    0.00047487565354418549,
                    -0.00052364010231792694,
                    0.00097232461500031922,
                    -0.00058197531926956704,
                    0.00097232461500031922,
                    -0.00052364010231792694,
                    0.00047487565354418549
                ]
            },
            {
                FPass: '3.4Hz',
                An: [
                    1,
                    -5.0857504132325992,
                    11.176413902126319,
                    -13.538885644253135,
                    9.5177668015992527,
                    -3.6784088464379092,
                    0.61055293114117926
                ],
                Bn: [
                    0.00050609792628541019,
                    -0.00048744681179604005,
                    0.00098536729663836428,
                    -0.00050295378495612093,
                    0.00098536729663836428,
                    -0.00048744681179604005,
                    0.00050609792628541019
                ]
            },
            {
                FPass: '3.5Hz',
                An: [
                    1,
                    -5.0470533643863025,
                    11.033857005215365,
                    -13.323957012064755,
                    9.3544529443583819,
                    -3.6170729366605485,
                    0.60177207187971815
                ],
                Bn: [
                    0.00053929372133769914,
                    -0.00044545020620777087,
                    0.0010054980833380746,
                    -0.00041733251219883686,
                    0.0010054980833380746,
                    -0.00044545020620777087,
                    0.00053929372133769914
                ]
            },
            {
                FPass: '3.6Hz',
                An: [
                    1,
                    -5.0077391663333266,
                    10.890272660751084,
                    -13.108818071019632,
                    9.1917544864637044,
                    -3.556234525056607,
                    0.593118766162817
                ],
                Bn: [
                    0.00057457010574279153,
                    -0.00039711857290904514,
                    0.0010336631509717141,
                    -0.00032409010883373458,
                    0.0010336631509717141,
                    -0.00039711857290904514,
                    0.00057457010574279153
                ]
            },
            {
                FPass: '3.7Hz',
                An: [
                    1,
                    -4.9678128313431369,
                    10.745721689562092,
                    -12.893563426245581,
                    9.0297222379244033,
                    -3.4958987001314563,
                    0.58459117448530962
                ],
                Bn: [
                    0.00061203944371388647,
                    -0.00034188870557128482,
                    0.0010708885963146798,
                    -0.00022209751526430994,
                    0.0010708885963146798,
                    -0.00034188870557128482,
                    0.00061203944371388647
                ]
            },
            {
                FPass: '5Hz',
                An: [
                    1,
                    -4.3953718980122209,
                    8.8065907250470143,
                    -10.125704979452649,
                    7.0049484999755807,
                    -2.7590717209153501,
                    0.48438075191575458
                ],
                Bn: [
                    0.0013606982922613605,
                    0.0013265712897603953,
                    0.0030177674061202617,
                    0.0026461819593100854,
                    0.0030177674061202617,
                    0.0013265712897603953,
                    0.0013606982922613605
                ]
            },
            {
                FPass: '10Hz',
                An: [
                    1,
                    -1.442313588166523,
                    2.3885907767979719,
                    -2.1516389394569844,
                    1.6003366966339663,
                    -0.7658811315068752,
                    0.23658317749186961
                ],
                Bn: [
                    0.018716432824390894,
                    0.082559126839503755,
                    0.17440705854756064,
                    0.22017019463377913,
                    0.17440705854756064,
                    0.082559126839503755,
                    0.018716432824390894
                ]
            },
        ]
    },
    IIR_30: {
        Fs: '30Hz',
        Args: [
            {
                FPass: '0.5Hz',
                An: [
                    1,
                    -5.8861491828271841,
                    14.453818494622636,
                    -18.952152051441423,
                    13.995167384304736,
                    -5.5184020166030496,
                    0.9077174855518646
                ],
                Bn: [
                    0.00010808665716260265,
                    -0.00059449132888110263,
                    0.0014097738216122284,
                    -0.0018466370469264911,
                    0.0014097738216122286,
                    -0.00059449132888110263,
                    0.00010808665716260265
                ]
            },
            {
                FPass: '0.1Hz',
                An: [
                    1,
                    -5.9799477798855403,
                    14.900624081822606,
                    -19.803006628987987,
                    14.804753396780299,
                    -5.9032443329996802,
                    0.98082126327785291
                ],
                Bn: [
                    0.000099559092599905947,
                    -0.00059519379123896101,
                    0.001484750846359574,
                    -0.0019782322887125846,
                    0.001484750846359574,
                    -0.00059519379123896101,
                    0.000099559092599905947
                ]
            },
        ]
    }
};

/**
 * 步态参数计算
 */
(function () {

    var GaitManager = {};

    //=======================2.0==========================
    /**
     * 二次抛物线内插法
     * @param {int} x     插值点   坐标x
     * @param {int} x1    第一个点 坐标x
     * @param {float} y1  第一个点 坐标y
     * @param {int} x2    第二个点 坐标x
     * @param {float} y2  第二个点 坐标y
     * @param {int} x3    第三个点 坐标x
     * @param {float} y3  第三个点 坐标y
     * @returns 插值点   坐标y
     */
    GaitManager.lerp3 = function (x, x1, y1, x2, y2, x3, y3) {
        return y1 * ((x - x2) * (x - x3)) / ((x1 - x2) * (x1 - x3)) +
            y2 * ((x - x1) * (x - x3)) / ((x2 - x1) * (x2 - x3)) +
            y3 * ((x - x1) * (x - x2)) / ((x3 - x1) * (x3 - x2));
    }

    //每个步态周期数据插值 长度101
    GaitManager.lerpData = function (arr) {
        // return arr;
        let newArr = [];
        let len = arr.length;
        if (len > 2 && len < 101) {   //插值          
            var interval = Math.floor(len / (101 - len + 1));
            if (interval < 1) {
                var values = [];
                for (let i = 0; i < len - 1; i++) {
                    var index = i + 1;
                    if (arr[index + 1] == undefined || arr[index + 1] == null) arr[index + 1] = arr[index];
                    var item = this.lerp3(index, index - 1, arr[index - 1], index + 1, arr[index], index + 2, arr[index + 1]);
                    var tmp = {
                        index: index + i,
                        value: item
                    }
                    values.push(tmp);
                }
                values.forEach(item => {
                    arr.splice(item.index, 0, item.value);
                });
                return GaitManager.lerpData(arr);
            } else {
                var values = [];
                for (let i = 0; i < 101 - len; i++) {
                    var index = interval * (i + 1);
                    if (arr[index + 1] == undefined || arr[index + 1] == null) arr[index + 1] = arr[index];
                    var item = this.lerp3(index, index - 1, arr[index - 1], index + 1, arr[index], index + 2, arr[index + 1]);
                    var tmp = {
                        index: index + i,
                        value: item
                    }
                    values.push(tmp);
                }
                values.forEach(item => {
                    arr.splice(item.index, 0, item.value);
                });
                newArr = arr;
            }
        }
        else if (len >= 101) { //抽出多的数据
            var interval = Math.floor(len / (len - 101 + 1));
            if (interval < 2) {
                var values = [];
                for (let i = 0; i < Math.floor(len/2); i++) {
                    values.push(i+1);
                }
                if (values.length > 0) {
                    values.forEach(item => {
                        arr.splice(item, 1);
                    });
                }
                return GaitManager.lerpData(arr);
            }
            else {
                var values = [];
                for (let i = 0; i < len - 101; i++) {
                    var index = interval * (i + 1);
                    values.push(index - i);
                }
                if (values.length > 0) {
                    values.forEach(item => {
                        arr.splice(item, 1);
                    });
                }
                newArr = arr;
            }
        }
        return newArr;
    }
    //步态周期数据平均
    GaitManager.CaptureDataAvg = function (arr) {
        var temp = [];
        arr.forEach(element => {
            temp.push(GaitManager.lerpData(element))
        });
        var item = [], sum = 0;
        for (let j = 0; j < 101; j++) {
            sum = 0;
            for (let i = 1; i < temp.length - 1; i++) {
                sum += temp[i][j];
            }
            item.push(Number((sum / (temp.length - 2)).toFixed(2)));
        }
        return item;
    }
    /**
     * 评估时间格式化
     * @param {number} value 计时——秒数
     * @returns 
     */
    GaitManager.formatSeconds = function (value) {
        var theTime = value; // 秒
        var theTime1 = 0;
        var theTime2 = 0;
        if (theTime > 60) {
            theTime1 = theTime / 60;
            theTime = theTime % 60;
            if (theTime1 > 60) {
                theTime2 = theTime1 / 60;
                theTime1 = theTime1 % 60;
            }
        }
        var result = "" + theTime.toFixed(1) + " 秒";
        if (theTime1 > 0) {
            if (theTime < 10) result = "0" + theTime.toFixed(1) + " 秒";
            result = "" + parseInt(theTime1) + " 分 " + result;
        }
        if (theTime2 > 0) {
            result = "" + parseInt(theTime2) + " 小时 " + result;
        }
        return result;
    }
    GaitManager.formatSeconds_Train = function (value) {
        var theTime = parseInt(value); // 秒
        var theTime1 = 0;
        var theTime2 = 0;
        if (theTime > 60) {
            theTime1 = parseInt(theTime / 60);
            theTime = parseInt(theTime % 60);
            if (theTime1 > 60) {
                theTime2 = parseInt(theTime1 / 60);
                theTime1 = parseInt(theTime1 % 60);
            }
        }
        var result = "" + parseInt(theTime) + " 秒";
        if (theTime1 >= 0) {
            if (parseInt(theTime) < 10) result = "0" + parseInt(theTime) + " 秒";
            result = "" + parseInt(theTime1) + " 分 " + result;
        }
        if (theTime2 > 0) {
            result = "" + parseInt(theTime2) + " 小时 " + result;
        }
        return result;
    }
    /**
     * 数组平均值
     * @param {number[]} arr 
     * @param {number} num 保留几位小数
     * @returns 
     */
    GaitManager.averages = function (arr, num) {
        let sum = 0;
        for (let i = 1; i < arr.length - 1; i++) {
            sum += arr[i];
        }
        return Number((sum / (arr.length - 2)).toFixed(num));
    }

    /**
     * 标准差
     * @param {number[]} arr 数据数组
     * @param {number} avg 数组数据的平均值
     */
    GaitManager.standardDeviation = function (arr, avg) {
        let sum = 0;
        for (let i = 1; i < arr.length; i++) {
            sum += (arr[i] - avg) * (arr[i] - avg);
        }
        let s = sum / (arr.length - 1);
        return Math.sqrt(s).toFixed(3);
    }

    /**
     * 步时
     * @param {Date[]} arr 每一步的着地时间
     * @param {Date} toeOffTime 第一步离地时间 / 开始计时的时间？？
     * @returns 
     */
    GaitManager.chasse = function (arr, toeOffTime) {
        let chasses = [];
        for (let i = 0; i < arr.length; i++) {
            if (i == 0) {
                chasses.push(0);
            } else {
                chasses.push(Number(((arr[i] - arr[i - 1]) / 1000).toFixed(2)));
            }
        }
        //第一步步时处理
        var tmp = 0;
        if (chasses.length > 4) {
            var sum = 0;
            for (let i = 0; i < 3; i++) {
                var num = Math.floor(Math.random() * (chasses.length - 1) + 1);
                sum += chasses[num];
            }
            tmp = Number((sum / 3).toFixed(2));
        } else {
            tmp = Number(((chasses[1] + chasses[2] + chasses[3]) / 3).toFixed(2));
        }
        chasses[0] = tmp;

        return chasses;
    }
    GaitManager.chasse_Train = function (arr, toeOffTime) {
        let chasses = [];
        for (let i = 0; i < arr.length; i++) {
            if (i == 0) {
                var a = Number(((arr[0] - toeOffTime) / 1000).toFixed(2));
                chasses.push(a);
            } else {
                chasses.push(Number(((arr[i] - arr[i - 1]) / 1000).toFixed(2)));
            }
        }
        return chasses;
    }

    /**
     * 步长
     * @param {Date[]} arr   步态周期数据
     * @param {number} LegLen  腿长(cm)
     * @returns
     */
    GaitManager.stepLength = function (arr, LegLen) {
        let stepLengths = [];
        for (let i = 0; i < arr.length; i++) {
            let maxAngle = 0;
            if (arr[i] != undefined || arr[i] != null) {
                maxAngle = Math.max(...arr[i]);
                if (maxAngle == undefined || maxAngle == null) maxAngle = 0;
                if (maxAngle < 0) maxAngle = 0;
            } else {
                maxAngle = 0;
            }
            var tmp = 1.17 * LegLen / 100 * Math.sin(maxAngle / 180 * Math.PI);
            if (tmp < 0 || tmp == null || tmp == undefined) tmp = 0;
            stepLengths.push(Number(tmp.toFixed(2)));
        }
        return stepLengths;
    }
    /**
     * 步幅
     * @param {Date} timeL 左脚第一步离地时间
     * @param {Date} timeR 右脚第一步离地时间
     * @param {number} arrL   左步长
     * @param {number} arrR   右步长
     * @param {boolean} isLeft 是否左腿
     * @returns
     */
    GaitManager.stride = function (timeL, timeR, arrL, arrR, isLeft) {
        let strides = [];
        if (!isLeft) { //右脚
            if (timeL - timeR > 0) { //先迈右脚
                for (let i = 0; i < arrR.length; i++) {
                    if (i == 0) {
                        strides.push(Number((arrR[0] + arrR[1]).toFixed(2)));
                    } else {
                        if (arrR[i] == undefined || arrR[i] == null) arrR[i] = 0;
                        if (arrL[i - 1] == undefined || arrL[i - 1] == null) arrL[i] = 0;
                        strides.push(Number((arrR[i] + arrL[i - 1]).toFixed(2)));
                    }
                }
            } else {//先迈左脚
                for (let i = 0; i < arrR.length; i++) {
                    if (arrR[i] == undefined || arrR[i] == null) arrR[i] = 0;
                    if (arrL[i] == undefined || arrL[i] == null) arrL[i] = 0;
                    strides.push(Number((arrR[i] + arrL[i]).toFixed(2)));
                }
            }
        } else {
            if (timeL - timeR > 0) {
                for (let i = 0; i < arrL.length; i++) {
                    if (arrR[i] == undefined || arrR[i] == null) arrR[i] = 0;
                    if (arrL[i] == undefined || arrL[i] == null) arrL[i] = 0;
                    strides.push(Number((arrR[i] + arrL[i]).toFixed(2)));
                }
            } else {
                for (let i = 0; i < arrL.length; i++) {
                    if (i == 0) {
                        strides.push(Number((arrL[0] + arrL[1]).toFixed(2)));
                    } else {
                        if (arrR[i - 1] == undefined || arrR[i - 1] == null) arrR[i] = 0;
                        if (arrL[i] == undefined || arrL[i] == null) arrL[i] = 0;
                        strides.push(Number((arrL[i] + arrR[i - 1]).toFixed(2)));
                    }
                }
            }
        }
        return strides;
    }
    GaitManager.stride_Train = function (timeL, timeR, arrL, arrR, isLeft) {
        let strides = [];
        if (!isLeft) { //右脚
            if (timeL - timeR > 0) { //先迈右脚
                for (let i = 0; i < arrR.length; i++) {
                    if (i == 0) {
                        strides.push(Number((arrR[0] + arrL[0]).toFixed(2)));
                    } else {
                        if (arrR[i] == undefined || arrR[i] == null) arrR[i] = 0;
                        if (arrL[i - 1] == undefined || arrL[i - 1] == null) arrL[i] = 0;
                        strides.push(Number((arrR[i] + arrL[i - 1]).toFixed(2)));
                    }
                }
            } else {//先迈左脚
                for (let i = 0; i < arrR.length; i++) {
                    if (arrR[i] == undefined || arrR[i] == null) arrR[i] = 0;
                    if (arrL[i] == undefined || arrL[i] == null) arrL[i] = 0;
                    strides.push(Number((arrR[i] + arrL[i]).toFixed(2)));
                }
            }
        } else {
            if (timeL - timeR > 0) {
                for (let i = 0; i < arrL.length; i++) {
                    if (arrR[i] == undefined || arrR[i] == null) arrR[i] = 0;
                    if (arrL[i] == undefined || arrL[i] == null) arrL[i] = 0;
                    strides.push(Number((arrR[i] + arrL[i]).toFixed(2)));
                }
            } else {
                for (let i = 0; i < arrL.length; i++) {
                    if (i == 0) {
                        strides.push(Number((arrL[0] + arrR[0]).toFixed(2)));
                    } else {
                        if (arrR[i - 1] == undefined || arrR[i - 1] == null) arrR[i] = 0;
                        if (arrL[i] == undefined || arrL[i] == null) arrL[i] = 0;
                        strides.push(Number((arrL[i] + arrR[i - 1]).toFixed(2)));
                    }
                }
            }
        }
        return strides;
    }
    /**
     * 摆动时间
     * @param {Date[]} toeOffTimes  离地时间
     * @param {Date[]} heelStrikeTimes 落地时间
     * @returns 
     */
    GaitManager.swingTime = function (toeOffTimes, heelStrikeTimes) {
        let swingTimes = [];
        for (let i = 0; i < heelStrikeTimes.length; i++) {
            if (i == 0) {
                swingTimes.push(0);
            } else {
                swingTimes.push(Number(((heelStrikeTimes[i] - toeOffTimes[i]) / 1000).toFixed(2)));
            }
        }

        //第一步处理
        var tmp = 0;
        if (swingTimes.length > 4) {
            var sum = 0;
            for (let i = 0; i < 3; i++) {
                var num = Math.floor(Math.random() * (swingTimes.length - 1) + 1);
                sum += swingTimes[num];
            }
            tmp = Number((sum / 3).toFixed(2));
        } else {
            tmp = Number(((swingTimes[1] + swingTimes[2] + swingTimes[3]) / 3).toFixed(2));
        }
        swingTimes[0] = tmp;

        return swingTimes;
    }
    GaitManager.swingTime_Train = function (toeOffTimes, heelStrikeTimes) {
        let swingTimes = [];
        for (let i = 0; i < heelStrikeTimes.length; i++) {
            swingTimes.push(Number(((heelStrikeTimes[i] - toeOffTimes[i]) / 1000).toFixed(2)));
        }

        return swingTimes;
    }
    /**
     * 支撑时间
     * @param {number[]} chasses 步时
     * @param {number[]} swingTimes 摆动时间
     * @returns 
     */
    GaitManager.standTime = function (chasses, swingTimes) {
        let standTimes = [];
        for (let i = 0; i < chasses.length; i++) {
            if (i == 0) {
                standTimes.push(0);
            } else {
                standTimes.push(Number((chasses[i] - swingTimes[i]).toFixed(2)));
            }
        }

        //第一步处理
        var tmp = 0;
        if (standTimes.length > 4) {
            var sum = 0;
            for (let i = 0; i < 3; i++) {
                var num = Math.floor(Math.random() * (standTimes.length - 1) + 1);
                sum += standTimes[num];
            }
            tmp = Number((sum / 3).toFixed(2));
        } else {
            tmp = Number(((standTimes[1] + standTimes[2] + standTimes[3]) / 3).toFixed(2));
        }
        standTimes[0] = tmp;

        return standTimes;
    }
    GaitManager.standTime_Train = function (chasses, swingTimes) {
        let standTimes = [];
        for (let i = 0; i < chasses.length; i++) {

            standTimes.push(Number((chasses[i] - swingTimes[i]).toFixed(2)));
        }

        return standTimes;
    }
    /**
     * 摆动相
     * @param {number[]} chasses  步时
     * @param {number[]} standTimes 摆动时间
     * @returns 
     */
    GaitManager.swingPhase = function (chasses, swingTimes) {
        let swingPhases = [];
        for (let i = 0; i < chasses.length; i++) {
            var tmp = Number((swingTimes[i] / chasses[i]).toFixed(2));
            swingPhases.push(tmp);
        }

        return swingPhases;
    }
    /**
     * 支撑相
     * @param {number[]} standPhases 摆动相
     * @returns 
     */
    GaitManager.standPhase = function (swingPhases) {
        let standPhases = [];
        for (let i = 0; i < swingPhases.length; i++) {
            standPhases.push(Number((1 - swingPhases[i]).toFixed(2)));
        }
        return standPhases;
    }
    //步速          平均步幅 / 平均跨步时间
    GaitManager.legSpeed = function () { }
    //步频          2 / 平均跨步时间
    GaitManager.cadence = function () { }

    window.GaitManager = GaitManager;
})();
